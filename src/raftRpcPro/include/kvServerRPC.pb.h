// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kvServerRPC.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kvServerRPC_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kvServerRPC_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kvServerRPC_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kvServerRPC_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kvServerRPC_2eproto;
namespace raftKVRpcProctoc {
class GetArgs;
class GetArgsDefaultTypeInternal;
extern GetArgsDefaultTypeInternal _GetArgs_default_instance_;
class GetReply;
class GetReplyDefaultTypeInternal;
extern GetReplyDefaultTypeInternal _GetReply_default_instance_;
class PutAppendArgs;
class PutAppendArgsDefaultTypeInternal;
extern PutAppendArgsDefaultTypeInternal _PutAppendArgs_default_instance_;
class PutAppendReply;
class PutAppendReplyDefaultTypeInternal;
extern PutAppendReplyDefaultTypeInternal _PutAppendReply_default_instance_;
}  // namespace raftKVRpcProctoc
PROTOBUF_NAMESPACE_OPEN
template<> ::raftKVRpcProctoc::GetArgs* Arena::CreateMaybeMessage<::raftKVRpcProctoc::GetArgs>(Arena*);
template<> ::raftKVRpcProctoc::GetReply* Arena::CreateMaybeMessage<::raftKVRpcProctoc::GetReply>(Arena*);
template<> ::raftKVRpcProctoc::PutAppendArgs* Arena::CreateMaybeMessage<::raftKVRpcProctoc::PutAppendArgs>(Arena*);
template<> ::raftKVRpcProctoc::PutAppendReply* Arena::CreateMaybeMessage<::raftKVRpcProctoc::PutAppendReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace raftKVRpcProctoc {

// ===================================================================

class GetArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProctoc.GetArgs) */ {
 public:
  inline GetArgs() : GetArgs(nullptr) {};
  virtual ~GetArgs();

  GetArgs(const GetArgs& from);
  GetArgs(GetArgs&& from) noexcept
    : GetArgs() {
    *this = ::std::move(from);
  }

  inline GetArgs& operator=(const GetArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetArgs& operator=(GetArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetArgs* internal_default_instance() {
    return reinterpret_cast<const GetArgs*>(
               &_GetArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetArgs& a, GetArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(GetArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetArgs* New() const final {
    return CreateMaybeMessage<GetArgs>(nullptr);
  }

  GetArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetArgs& from);
  void MergeFrom(const GetArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftKVRpcProctoc.GetArgs";
  }
  protected:
  explicit GetArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvServerRPC_2eproto);
    return ::descriptor_table_kvServerRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kRequestIdFieldNumber = 3,
  };
  // bytes Key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes ClientId = 2;
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const void* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clientid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clientid(
      std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // int32 RequestId = 3;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raftKVRpcProctoc.GetArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvServerRPC_2eproto;
};
// -------------------------------------------------------------------

class GetReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProctoc.GetReply) */ {
 public:
  inline GetReply() : GetReply(nullptr) {};
  virtual ~GetReply();

  GetReply(const GetReply& from);
  GetReply(GetReply&& from) noexcept
    : GetReply() {
    *this = ::std::move(from);
  }

  inline GetReply& operator=(const GetReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetReply& operator=(GetReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetReply* internal_default_instance() {
    return reinterpret_cast<const GetReply*>(
               &_GetReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetReply& a, GetReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetReply* New() const final {
    return CreateMaybeMessage<GetReply>(nullptr);
  }

  GetReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetReply& from);
  void MergeFrom(const GetReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftKVRpcProctoc.GetReply";
  }
  protected:
  explicit GetReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvServerRPC_2eproto);
    return ::descriptor_table_kvServerRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // bytes Err = 1;
  void clear_err();
  const std::string& err() const;
  void set_err(const std::string& value);
  void set_err(std::string&& value);
  void set_err(const char* value);
  void set_err(const void* value, size_t size);
  std::string* mutable_err();
  std::string* release_err();
  void set_allocated_err(std::string* err);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_err();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_err(
      std::string* err);
  private:
  const std::string& _internal_err() const;
  void _internal_set_err(const std::string& value);
  std::string* _internal_mutable_err();
  public:

  // bytes Value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:raftKVRpcProctoc.GetReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvServerRPC_2eproto;
};
// -------------------------------------------------------------------

class PutAppendArgs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProctoc.PutAppendArgs) */ {
 public:
  inline PutAppendArgs() : PutAppendArgs(nullptr) {};
  virtual ~PutAppendArgs();

  PutAppendArgs(const PutAppendArgs& from);
  PutAppendArgs(PutAppendArgs&& from) noexcept
    : PutAppendArgs() {
    *this = ::std::move(from);
  }

  inline PutAppendArgs& operator=(const PutAppendArgs& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutAppendArgs& operator=(PutAppendArgs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutAppendArgs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutAppendArgs* internal_default_instance() {
    return reinterpret_cast<const PutAppendArgs*>(
               &_PutAppendArgs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PutAppendArgs& a, PutAppendArgs& b) {
    a.Swap(&b);
  }
  inline void Swap(PutAppendArgs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutAppendArgs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutAppendArgs* New() const final {
    return CreateMaybeMessage<PutAppendArgs>(nullptr);
  }

  PutAppendArgs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutAppendArgs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutAppendArgs& from);
  void MergeFrom(const PutAppendArgs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutAppendArgs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftKVRpcProctoc.PutAppendArgs";
  }
  protected:
  explicit PutAppendArgs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvServerRPC_2eproto);
    return ::descriptor_table_kvServerRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kOpFieldNumber = 3,
    kClientIdFieldNumber = 4,
    kRequestIdFieldNumber = 5,
  };
  // bytes Key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const void* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // bytes Value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bytes Op = 3;
  void clear_op();
  const std::string& op() const;
  void set_op(const std::string& value);
  void set_op(std::string&& value);
  void set_op(const char* value);
  void set_op(const void* value, size_t size);
  std::string* mutable_op();
  std::string* release_op();
  void set_allocated_op(std::string* op);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_op();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_op(
      std::string* op);
  private:
  const std::string& _internal_op() const;
  void _internal_set_op(const std::string& value);
  std::string* _internal_mutable_op();
  public:

  // bytes ClientId = 4;
  void clear_clientid();
  const std::string& clientid() const;
  void set_clientid(const std::string& value);
  void set_clientid(std::string&& value);
  void set_clientid(const char* value);
  void set_clientid(const void* value, size_t size);
  std::string* mutable_clientid();
  std::string* release_clientid();
  void set_allocated_clientid(std::string* clientid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_clientid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_clientid(
      std::string* clientid);
  private:
  const std::string& _internal_clientid() const;
  void _internal_set_clientid(const std::string& value);
  std::string* _internal_mutable_clientid();
  public:

  // int32 RequestId = 5;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::int32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:raftKVRpcProctoc.PutAppendArgs)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr op_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr clientid_;
  ::PROTOBUF_NAMESPACE_ID::int32 requestid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvServerRPC_2eproto;
};
// -------------------------------------------------------------------

class PutAppendReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:raftKVRpcProctoc.PutAppendReply) */ {
 public:
  inline PutAppendReply() : PutAppendReply(nullptr) {};
  virtual ~PutAppendReply();

  PutAppendReply(const PutAppendReply& from);
  PutAppendReply(PutAppendReply&& from) noexcept
    : PutAppendReply() {
    *this = ::std::move(from);
  }

  inline PutAppendReply& operator=(const PutAppendReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline PutAppendReply& operator=(PutAppendReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PutAppendReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutAppendReply* internal_default_instance() {
    return reinterpret_cast<const PutAppendReply*>(
               &_PutAppendReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PutAppendReply& a, PutAppendReply& b) {
    a.Swap(&b);
  }
  inline void Swap(PutAppendReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PutAppendReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PutAppendReply* New() const final {
    return CreateMaybeMessage<PutAppendReply>(nullptr);
  }

  PutAppendReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PutAppendReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PutAppendReply& from);
  void MergeFrom(const PutAppendReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PutAppendReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "raftKVRpcProctoc.PutAppendReply";
  }
  protected:
  explicit PutAppendReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_kvServerRPC_2eproto);
    return ::descriptor_table_kvServerRPC_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrFieldNumber = 1,
  };
  // bytes Err = 1;
  void clear_err();
  const std::string& err() const;
  void set_err(const std::string& value);
  void set_err(std::string&& value);
  void set_err(const char* value);
  void set_err(const void* value, size_t size);
  std::string* mutable_err();
  std::string* release_err();
  void set_allocated_err(std::string* err);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_err();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_err(
      std::string* err);
  private:
  const std::string& _internal_err() const;
  void _internal_set_err(const std::string& value);
  std::string* _internal_mutable_err();
  public:

  // @@protoc_insertion_point(class_scope:raftKVRpcProctoc.PutAppendReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr err_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kvServerRPC_2eproto;
};
// ===================================================================

class kvServerRpc_Stub;

class kvServerRpc : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline kvServerRpc() {};
 public:
  virtual ~kvServerRpc();

  typedef kvServerRpc_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void PutAppend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftKVRpcProctoc::PutAppendArgs* request,
                       ::raftKVRpcProctoc::PutAppendReply* response,
                       ::google::protobuf::Closure* done);
  virtual void Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftKVRpcProctoc::GetArgs* request,
                       ::raftKVRpcProctoc::GetReply* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(kvServerRpc);
};

class kvServerRpc_Stub : public kvServerRpc {
 public:
  kvServerRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  kvServerRpc_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~kvServerRpc_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements kvServerRpc ------------------------------------------

  void PutAppend(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftKVRpcProctoc::PutAppendArgs* request,
                       ::raftKVRpcProctoc::PutAppendReply* response,
                       ::google::protobuf::Closure* done);
  void Get(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::raftKVRpcProctoc::GetArgs* request,
                       ::raftKVRpcProctoc::GetReply* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(kvServerRpc_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetArgs

// bytes Key = 1;
inline void GetArgs::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetArgs::key() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetArgs.Key)
  return _internal_key();
}
inline void GetArgs::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetArgs.Key)
}
inline std::string* GetArgs::mutable_key() {
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.GetArgs.Key)
  return _internal_mutable_key();
}
inline const std::string& GetArgs::_internal_key() const {
  return key_.Get();
}
inline void GetArgs::_internal_set_key(const std::string& value) {

  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetArgs::set_key(std::string&& value) {

  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.GetArgs.Key)
}
inline void GetArgs::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.GetArgs.Key)
}
inline void GetArgs::set_key(const void* value,
    size_t size) {

  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.GetArgs.Key)
}
inline std::string* GetArgs::_internal_mutable_key() {

  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetArgs::release_key() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.GetArgs.Key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetArgs::set_allocated_key(std::string* key) {
  if (key != nullptr) {

  } else {

  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.GetArgs.Key)
}
inline std::string* GetArgs::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raftKVRpcProctoc.GetArgs.Key)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetArgs::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {

  } else {

  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftKVRpcProctoc.GetArgs.Key)
}

// bytes ClientId = 2;
inline void GetArgs::clear_clientid() {
  clientid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetArgs::clientid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetArgs.ClientId)
  return _internal_clientid();
}
inline void GetArgs::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetArgs.ClientId)
}
inline std::string* GetArgs::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.GetArgs.ClientId)
  return _internal_mutable_clientid();
}
inline const std::string& GetArgs::_internal_clientid() const {
  return clientid_.Get();
}
inline void GetArgs::_internal_set_clientid(const std::string& value) {

  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetArgs::set_clientid(std::string&& value) {

  clientid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.GetArgs.ClientId)
}
inline void GetArgs::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.GetArgs.ClientId)
}
inline void GetArgs::set_clientid(const void* value,
    size_t size) {

  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.GetArgs.ClientId)
}
inline std::string* GetArgs::_internal_mutable_clientid() {

  return clientid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetArgs::release_clientid() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.GetArgs.ClientId)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetArgs::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {

  } else {

  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.GetArgs.ClientId)
}
inline std::string* GetArgs::unsafe_arena_release_clientid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raftKVRpcProctoc.GetArgs.ClientId)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return clientid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetArgs::unsafe_arena_set_allocated_clientid(
    std::string* clientid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clientid != nullptr) {

  } else {

  }
  clientid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clientid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftKVRpcProctoc.GetArgs.ClientId)
}

// int32 RequestId = 3;
inline void GetArgs::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetArgs::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 GetArgs::requestid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetArgs.RequestId)
  return _internal_requestid();
}
inline void GetArgs::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {

  requestid_ = value;
}
inline void GetArgs::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetArgs.RequestId)
}

// -------------------------------------------------------------------

// GetReply

// bytes Err = 1;
inline void GetReply::clear_err() {
  err_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetReply::err() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetReply.Err)
  return _internal_err();
}
inline void GetReply::set_err(const std::string& value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetReply.Err)
}
inline std::string* GetReply::mutable_err() {
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.GetReply.Err)
  return _internal_mutable_err();
}
inline const std::string& GetReply::_internal_err() const {
  return err_.Get();
}
inline void GetReply::_internal_set_err(const std::string& value) {

  err_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetReply::set_err(std::string&& value) {

  err_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.GetReply.Err)
}
inline void GetReply::set_err(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  err_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.GetReply.Err)
}
inline void GetReply::set_err(const void* value,
    size_t size) {

  err_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.GetReply.Err)
}
inline std::string* GetReply::_internal_mutable_err() {

  return err_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetReply::release_err() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.GetReply.Err)
  return err_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetReply::set_allocated_err(std::string* err) {
  if (err != nullptr) {

  } else {

  }
  err_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.GetReply.Err)
}
inline std::string* GetReply::unsafe_arena_release_err() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raftKVRpcProctoc.GetReply.Err)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return err_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetReply::unsafe_arena_set_allocated_err(
    std::string* err) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (err != nullptr) {

  } else {

  }
  err_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      err, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftKVRpcProctoc.GetReply.Err)
}

// bytes Value = 2;
inline void GetReply::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GetReply::value() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.GetReply.Value)
  return _internal_value();
}
inline void GetReply::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.GetReply.Value)
}
inline std::string* GetReply::mutable_value() {
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.GetReply.Value)
  return _internal_mutable_value();
}
inline const std::string& GetReply::_internal_value() const {
  return value_.Get();
}
inline void GetReply::_internal_set_value(const std::string& value) {

  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GetReply::set_value(std::string&& value) {

  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.GetReply.Value)
}
inline void GetReply::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.GetReply.Value)
}
inline void GetReply::set_value(const void* value,
    size_t size) {

  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.GetReply.Value)
}
inline std::string* GetReply::_internal_mutable_value() {

  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GetReply::release_value() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.GetReply.Value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetReply::set_allocated_value(std::string* value) {
  if (value != nullptr) {

  } else {

  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.GetReply.Value)
}
inline std::string* GetReply::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raftKVRpcProctoc.GetReply.Value)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GetReply::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {

  } else {

  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftKVRpcProctoc.GetReply.Value)
}

// -------------------------------------------------------------------

// PutAppendArgs

// bytes Key = 1;
inline void PutAppendArgs::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutAppendArgs::key() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.Key)
  return _internal_key();
}
inline void PutAppendArgs::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.Key)
}
inline std::string* PutAppendArgs::mutable_key() {
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendArgs.Key)
  return _internal_mutable_key();
}
inline const std::string& PutAppendArgs::_internal_key() const {
  return key_.Get();
}
inline void PutAppendArgs::_internal_set_key(const std::string& value) {

  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutAppendArgs::set_key(std::string&& value) {

  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.PutAppendArgs.Key)
}
inline void PutAppendArgs::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.PutAppendArgs.Key)
}
inline void PutAppendArgs::set_key(const void* value,
    size_t size) {

  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.PutAppendArgs.Key)
}
inline std::string* PutAppendArgs::_internal_mutable_key() {

  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutAppendArgs::release_key() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendArgs.Key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutAppendArgs::set_allocated_key(std::string* key) {
  if (key != nullptr) {

  } else {

  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendArgs.Key)
}
inline std::string* PutAppendArgs::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raftKVRpcProctoc.PutAppendArgs.Key)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PutAppendArgs::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {

  } else {

  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftKVRpcProctoc.PutAppendArgs.Key)
}

// bytes Value = 2;
inline void PutAppendArgs::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutAppendArgs::value() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.Value)
  return _internal_value();
}
inline void PutAppendArgs::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.Value)
}
inline std::string* PutAppendArgs::mutable_value() {
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendArgs.Value)
  return _internal_mutable_value();
}
inline const std::string& PutAppendArgs::_internal_value() const {
  return value_.Get();
}
inline void PutAppendArgs::_internal_set_value(const std::string& value) {

  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutAppendArgs::set_value(std::string&& value) {

  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.PutAppendArgs.Value)
}
inline void PutAppendArgs::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.PutAppendArgs.Value)
}
inline void PutAppendArgs::set_value(const void* value,
    size_t size) {

  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.PutAppendArgs.Value)
}
inline std::string* PutAppendArgs::_internal_mutable_value() {

  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutAppendArgs::release_value() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendArgs.Value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutAppendArgs::set_allocated_value(std::string* value) {
  if (value != nullptr) {

  } else {

  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendArgs.Value)
}
inline std::string* PutAppendArgs::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raftKVRpcProctoc.PutAppendArgs.Value)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PutAppendArgs::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {

  } else {

  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftKVRpcProctoc.PutAppendArgs.Value)
}

// bytes Op = 3;
inline void PutAppendArgs::clear_op() {
  op_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutAppendArgs::op() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.Op)
  return _internal_op();
}
inline void PutAppendArgs::set_op(const std::string& value) {
  _internal_set_op(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.Op)
}
inline std::string* PutAppendArgs::mutable_op() {
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendArgs.Op)
  return _internal_mutable_op();
}
inline const std::string& PutAppendArgs::_internal_op() const {
  return op_.Get();
}
inline void PutAppendArgs::_internal_set_op(const std::string& value) {

  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutAppendArgs::set_op(std::string&& value) {

  op_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.PutAppendArgs.Op)
}
inline void PutAppendArgs::set_op(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.PutAppendArgs.Op)
}
inline void PutAppendArgs::set_op(const void* value,
    size_t size) {

  op_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.PutAppendArgs.Op)
}
inline std::string* PutAppendArgs::_internal_mutable_op() {

  return op_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutAppendArgs::release_op() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendArgs.Op)
  return op_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutAppendArgs::set_allocated_op(std::string* op) {
  if (op != nullptr) {

  } else {

  }
  op_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), op,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendArgs.Op)
}
inline std::string* PutAppendArgs::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raftKVRpcProctoc.PutAppendArgs.Op)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return op_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PutAppendArgs::unsafe_arena_set_allocated_op(
    std::string* op) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (op != nullptr) {

  } else {

  }
  op_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      op, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftKVRpcProctoc.PutAppendArgs.Op)
}

// bytes ClientId = 4;
inline void PutAppendArgs::clear_clientid() {
  clientid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutAppendArgs::clientid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.ClientId)
  return _internal_clientid();
}
inline void PutAppendArgs::set_clientid(const std::string& value) {
  _internal_set_clientid(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.ClientId)
}
inline std::string* PutAppendArgs::mutable_clientid() {
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendArgs.ClientId)
  return _internal_mutable_clientid();
}
inline const std::string& PutAppendArgs::_internal_clientid() const {
  return clientid_.Get();
}
inline void PutAppendArgs::_internal_set_clientid(const std::string& value) {

  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutAppendArgs::set_clientid(std::string&& value) {

  clientid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.PutAppendArgs.ClientId)
}
inline void PutAppendArgs::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.PutAppendArgs.ClientId)
}
inline void PutAppendArgs::set_clientid(const void* value,
    size_t size) {

  clientid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.PutAppendArgs.ClientId)
}
inline std::string* PutAppendArgs::_internal_mutable_clientid() {

  return clientid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutAppendArgs::release_clientid() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendArgs.ClientId)
  return clientid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutAppendArgs::set_allocated_clientid(std::string* clientid) {
  if (clientid != nullptr) {

  } else {

  }
  clientid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), clientid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendArgs.ClientId)
}
inline std::string* PutAppendArgs::unsafe_arena_release_clientid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raftKVRpcProctoc.PutAppendArgs.ClientId)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return clientid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PutAppendArgs::unsafe_arena_set_allocated_clientid(
    std::string* clientid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (clientid != nullptr) {

  } else {

  }
  clientid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      clientid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftKVRpcProctoc.PutAppendArgs.ClientId)
}

// int32 RequestId = 5;
inline void PutAppendArgs::clear_requestid() {
  requestid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutAppendArgs::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PutAppendArgs::requestid() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendArgs.RequestId)
  return _internal_requestid();
}
inline void PutAppendArgs::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {

  requestid_ = value;
}
inline void PutAppendArgs::set_requestid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendArgs.RequestId)
}

// -------------------------------------------------------------------

// PutAppendReply

// bytes Err = 1;
inline void PutAppendReply::clear_err() {
  err_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PutAppendReply::err() const {
  // @@protoc_insertion_point(field_get:raftKVRpcProctoc.PutAppendReply.Err)
  return _internal_err();
}
inline void PutAppendReply::set_err(const std::string& value) {
  _internal_set_err(value);
  // @@protoc_insertion_point(field_set:raftKVRpcProctoc.PutAppendReply.Err)
}
inline std::string* PutAppendReply::mutable_err() {
  // @@protoc_insertion_point(field_mutable:raftKVRpcProctoc.PutAppendReply.Err)
  return _internal_mutable_err();
}
inline const std::string& PutAppendReply::_internal_err() const {
  return err_.Get();
}
inline void PutAppendReply::_internal_set_err(const std::string& value) {

  err_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PutAppendReply::set_err(std::string&& value) {

  err_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:raftKVRpcProctoc.PutAppendReply.Err)
}
inline void PutAppendReply::set_err(const char* value) {
  GOOGLE_DCHECK(value != nullptr);

  err_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:raftKVRpcProctoc.PutAppendReply.Err)
}
inline void PutAppendReply::set_err(const void* value,
    size_t size) {

  err_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:raftKVRpcProctoc.PutAppendReply.Err)
}
inline std::string* PutAppendReply::_internal_mutable_err() {

  return err_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PutAppendReply::release_err() {
  // @@protoc_insertion_point(field_release:raftKVRpcProctoc.PutAppendReply.Err)
  return err_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PutAppendReply::set_allocated_err(std::string* err) {
  if (err != nullptr) {

  } else {

  }
  err_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), err,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:raftKVRpcProctoc.PutAppendReply.Err)
}
inline std::string* PutAppendReply::unsafe_arena_release_err() {
  // @@protoc_insertion_point(field_unsafe_arena_release:raftKVRpcProctoc.PutAppendReply.Err)
  GOOGLE_DCHECK(GetArena() != nullptr);

  return err_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PutAppendReply::unsafe_arena_set_allocated_err(
    std::string* err) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (err != nullptr) {

  } else {

  }
  err_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      err, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:raftKVRpcProctoc.PutAppendReply.Err)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace raftKVRpcProctoc

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kvServerRPC_2eproto